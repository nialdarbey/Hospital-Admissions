<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:jms="http://www.mulesoft.org/schema/mule/jms" xmlns:debugger="http://www.mulesoft.org/schema/mule/debugger" xmlns:jersey="http://www.mulesoft.org/schema/mule/jersey" xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:jdbc-ee="http://www.mulesoft.org/schema/mule/ee/jdbc" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.3.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd 
http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd 
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd 
http://www.mulesoft.org/schema/mule/ee/jdbc http://www.mulesoft.org/schema/mule/ee/jdbc/current/mule-jdbc-ee.xsd 
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd 
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd 
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd 
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd 
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd 
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd 
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd 
http://www.mulesoft.org/schema/mule/debugger http://www.mulesoft.org/schema/mule/debugger/current/mule-debugger.xsd ">

	<spring:beans>
		<spring:bean id="Derby_Data_Source" class="org.enhydra.jdbc.standard.StandardXADataSource" destroy-method="shutdown">
			<spring:property name="driverName" value="org.apache.derby.jdbc.EmbeddedDriver" />
			<spring:property name="url" value="jdbc:derby:muleEmbeddedDB;create=true" />
		</spring:bean>
		<spring:bean name="samlCustomValidator" class="com.mulesoft.summit.security.SAMLCustomValidator" id=""/>
	</spring:beans>
	<configuration doc:name="Configuration">
		<expression-language autoResolveVariables="false">
			<import name="CoverStatusType" class="com.mulesoft.summit.ins.StatusType" />
			<import name="AdmissionResponse" class="com.mulesoft.summit.adm.AdmissionResponse" />
			<import name="AdmissionStatusType" class="com.mulesoft.summit.adm.StatusType" />
			<import name="Episode" class="com.mulesoft.summit.adm.Episode" />
			<import name="HospitalCoverResponse" class="com.mulesoft.summit.ins.HospitalCoverResponse" />
			<import name="PlanType" class="com.mulesoft.summit.ins.PlanType" />
		</expression-language>
	</configuration>
	<jdbc-ee:connector name="JDBCConnector" dataSource-ref="Derby_Data_Source" validateConnections="true" queryTimeout="-1" pollingFrequency="0" doc:name="Database (JDBC)" />
	<file:connector name="FileConnector" autoDelete="true" outputAppend="true" streaming="true" validateConnections="true" doc:name="File" outputPattern="episodes.csv" />
	<data-mapper:config name="AdmissionRequest_to_HospitalCoverRequest" transformationGraphPath="admissionrequest_to_hospitalcoverrequest.grf" doc:name="DataMapper" />
	<data-mapper:config name="EpisodeXml_to_AdmissionResponse" transformationGraphPath="episodexml_to_admissionresponse.grf" doc:name="DataMapper" />
	<data-mapper:config name="to_Billing_CSV" transformationGraphPath="to_billing_csv.grf" doc:name="DataMapper" />
	<flow name="admisssions" doc:name="admisssions">
		<http:inbound-endpoint exchange-pattern="request-response" host="localhost" port="9090" doc:name=":9090/admissions" path="admissions" />
		<cxf:jaxws-service serviceClass="com.mulesoft.summit.adm.HospitalInformationService" doc:name="HospitalInformationService">
			<cxf:ws-security>
				<cxf:ws-config>
					<cxf:property key="action" value="SAMLTokenUnsigned" />
					<cxf:property key="signaturePropFile" value="wssecurity.properties" />
				</cxf:ws-config>
				<cxf:ws-custom-validator>
					<cxf:saml2-token-validator ref="samlCustomValidator" />
				</cxf:ws-custom-validator>
			</cxf:ws-security>
		</cxf:jaxws-service>
		<enricher target="sessionVars.insurance" doc:name="Enrich with hospitalCoverResponse">
			<flow-ref name="invoke_insurance_web_service" doc:name="Invoke Insurance Web Service" />
		</enricher>
		<choice doc:name="Choice">
			<when expression="#[sessionVars.insurance.status == CoverStatusType.NOT_COVERED]">
				<processor-chain>
					<set-payload value="#[with (response = new AdmissionResponse()) { status = AdmissionStatusType.NOT_ADMISSABLE }; response ]" doc:name="Rejected" />
				</processor-chain>
			</when>
			<otherwise>
				<processor-chain>
					<flow-ref name="admit_patient" doc:name="Admit Patient" />
					<data-mapper:transform config-ref="EpisodeXml_to_AdmissionResponse" doc:name="to AdmissionResponse">
						<data-mapper:input-arguments>
                            <data-mapper:input-argument key="insuranceCaseNumber">#[sessionVars.insurance.caseNumber]</data-mapper:input-argument>
                            <data-mapper:input-argument key="insurancePlan">#[sessionVars.insurance.plan.value()]</data-mapper:input-argument>
						</data-mapper:input-arguments>
					</data-mapper:transform>
				</processor-chain>
			</otherwise>
		</choice>
	</flow>
	<sub-flow name="invoke_insurance_web_service" doc:name="invoke_insurance_web_service">
		<data-mapper:transform config-ref="AdmissionRequest_to_HospitalCoverRequest" doc:name="to HospitalCoverRequest" />
		<cxf:jaxws-client enableMuleSoapHeaders="true" doc:name="InsuranceService Client" clientClass="com.mulesoft.summit.ins.InsuranceService_Service" port="InsuranceSOAP" operation="verify">
			<cxf:ws-security>
				<cxf:ws-config>
					<cxf:property key="action" value="SAMLTokenUnsigned" />
					<cxf:property key="samlPropFile" value="saml.properties" />
					<cxf:property key="samlCallbackClass" value="com.mulesoft.summit.security.SAMLCallbackHandler" />
				</cxf:ws-config>
			</cxf:ws-security>
		</cxf:jaxws-client>
		<http:outbound-endpoint exchange-pattern="request-response" host="localhost" port="9393" doc:name="POST :9393/approvals" path="approvals" />
	</sub-flow>
	<sub-flow name="admit_patient" doc:name="admit_patient">
		<enricher target="sessionVars.patientId" doc:name="Enrich with patientId" source="#[payload[0].PATIENT_ID]">
			<flow-ref name="get_record_from_HIS" doc:name="Get PatientId from HIS" />
		</enricher>
		<flow-ref name="invoke_ehr_web_service" doc:name="Invoke EHR Web Service" />
		<async doc:name="Async">
			<expression-filter expression="#[ [PlanType.BASIC, PlanType.PREMIUM] contains sessionVars.insurance.plan ]" doc:name="Insurance Plan BASIC or PREMIUM" />
			<flow-ref name="export_to_billing_system" doc:name="Export to Billing System" />
		</async>
	</sub-flow>
	<sub-flow name="get_record_from_HIS" doc:name="get_record_from_HIS">
		<scripting:component doc:name="Populate table">
			<scripting:script engine="Groovy">
                <scripting:text><![CDATA[jdbcConnector = muleContext.getRegistry().lookupConnector("JDBCConnector");
                                                                                                                                                                                                                                                                        qr = jdbcConnector.getQueryRunner();
                                                                                                                                                                                                                                                                        conn = jdbcConnector.getConnection();
                                                                                                                                                                                                                                                                        qr.update(conn, "declare global temporary table patients(patient_id varchar(256), patient_nat_id varchar(265)) not logged");
                                                                                                                                                                                                                                                                        qr.update(conn, "insert into patients (patient_id, patient_nat_id) values ('PA1111', 'NA1111')");
                                                                                                                                                                                                                                                                        qr.update(conn, "insert into patients (patient_id, patient_nat_id) values ('PA2222', 'NA2222')");
                                                                                                                                                                                                                                                                        qr.update(conn, "insert into patients (patient_id, patient_nat_id) values ('PA3333', 'NA3333')");
                                                                                                                                                                                                                                                                        return payload;]]></scripting:text>
			</scripting:script>
		</scripting:component>
		<jdbc-ee:outbound-endpoint exchange-pattern="request-response" queryKey="select" queryTimeout="-1" connector-ref="JDBCConnector" doc:name="Find Patient Record">
			<jdbc-ee:query key="select" value="select * from (select row_number() over() as rowNum, patients.* from patients where patient_nat_id = #[payload.nationalIdNumber]) as tmp where rowNum &lt;= 1" />
		</jdbc-ee:outbound-endpoint>
	</sub-flow>
	<sub-flow name="invoke_ehr_web_service" doc:name="invoke_ehr_web_service">
		<set-payload value="#[ [ 'admissionRequest' : payload ] ]" doc:name="Set Payload" />
		<http:outbound-endpoint exchange-pattern="request-response" host="localhost" port="9494" path="ehr/api/#[payload.admissionRequest.procedure.department]/episodes?patientId=#[sessionVars.patientId]" doc:name="GET :9494/ehr/api/#[department]/episodes?patientId=#[patientId]" method="GET" />
		<object-to-string-transformer doc:name="Object to String" />
		<tracking:custom-event event-name="clinical_admission" doc:name="EHR Episode">
			<tracking:meta-data key="patientId" value="#[sessionVars.patientId]" />
            <tracking:meta-data key="episodeId" value="#[xpath('/Episode/episodeId/text()').text]"/>
		</tracking:custom-event>
	</sub-flow>
	<sub-flow name="export_to_billing_system" doc:name="export_to_billing_system">
        <data-mapper:transform config-ref="to_Billing_CSV" doc:name="to CSV">
            <data-mapper:input-arguments>
                <data-mapper:input-argument key="insuranceCaseNumber">#[sessionVars.insurance.caseNumber]</data-mapper:input-argument>
                <data-mapper:input-argument key="insurancePlan">#[sessionVars.insurance.plan.value()]</data-mapper:input-argument>
            </data-mapper:input-arguments>
        </data-mapper:transform>
        <object-to-string-transformer doc:name="Object to String" />
        <tracking:custom-event event-name="billing_event" doc:name="Patient Billing">
            <tracking:meta-data key="episodeId" value="#[payload.split(',')[1]]"/>
            <tracking:meta-data key="cost" value="#[payload.split(',')[5]]"/>
		</tracking:custom-event>
        <logger message="#[payload]" level="INFO" doc:name="Log CSV"/>
		<file:outbound-endpoint responseTimeout="10000" doc:name="/home/billing" connector-ref="FileConnector" path="/Users/nialdarbey/test/billing" />
	</sub-flow>
</mule>
